# =================================================================
# TODO: Aktuell nutzen beide Build-Trigger (pr-checks und build-lda-on-main-push) die gleiche 
# cloudbuild.yaml. Das ist funktional, aber der pr-checks-Trigger würde eigentlich nur den Linter-Schritt
# benötigen, nicht die Docker-Build-Schritte. Für die Zukunft könnten wir eine separate 
# cloudbuild-pr.yaml nur für die Checks erstellen, um die PR-Checks noch schneller zu machen.
# =================================================================
# Diese Datei definiert die Schritte, die Google Cloud Build ausführen soll,
# wenn ein Push auf den Branch 'main' erfolgt.
# Sie baut ein Docker-Image für den LDA-Service und pusht es in das Artifact Registry.
# Die Protobuf-Dateien werden auf Qualität und Konsistenz geprüft, bevor das Image gebaut wird.
# Die Protobuf-Dateien befinden sich im Verzeichnis 'proto' und die Dockerfile im Verzeichnis 'python/services/agent-lda'.
# Die fertige 'buf'-Anwendung wird heruntergeladen und verwendet, um die Protobuf-Dateien zu prüfen.
# Die Docker-Images werden in der Region 'europe-west3' gespeichert.
# Die Images werden in das Artifact Registry unter dem Pfad 'europe-west3-docker.pkg.dev/$PROJECT_ID/agent-images/lda-service:$BUILD_ID' gepusht.
# =================================================================
steps:
  # =================================================================
  # SCHRITT 1: Protobuf-Dateien auf Qualität und Konsistenz prüfen
  # (Neue, robustere Methode)
  # =================================================================
  - name: 'gcr.io/cloud-builders/wget'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Lade die fertige 'buf'-Anwendung (v1.54.0) herunter..."
        # Wir laden eine spezifische, aktuelle und stabile Version von buf für Linux
        wget https://github.com/bufbuild/buf/releases/download/v1.54.0/buf-Linux-x86_64 -O /workspace/buf
        
        echo "Mache 'buf' ausführbar..."
        chmod +x /workspace/buf
        
        echo "Führe Buf Linter aus..."
        # Wir führen die heruntergeladene Datei direkt aus
        # /workspace/buf lint --path proto
        # cd proto && /workspace/buf lint
        /workspace/buf lint --config /workspace/buf.yaml /workspace/proto
    id: 'Lint Proto Files'

  # =================================================================
  # SCHRITT 2: Docker Image für den LDA-Service bauen
  # =================================================================
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'europe-west3-docker.pkg.dev/$PROJECT_ID/agent-images/lda-service:$BUILD_ID',
        # -f gibt explizit den Pfad zu unserer Dockerfile an
        '-f',
        'python/services/agent-lda/Dockerfile',
        # Der '.' am Ende sagt Docker, es soll das gesamte Projektverzeichnis als Kontext nehmen,
        # damit es alle nötigen Dateien (wie das 'kiorga'-Paket) finden kann.
        '.'
      ]
    id: 'Build Docker Image for LDA'

  # =================================================================
  # SCHRITT 3: Gebautes Docker Image in das Artifact Registry pushen
  # =================================================================
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'europe-west3-docker.pkg.dev/$PROJECT_ID/agent-images/lda-service:$BUILD_ID',
      ]
    id: 'Push Docker Image to Artifact Registry'

  # =================================================================
  # SCHRITT 4: Docker Image in Cloud Run deployen
  # =================================================================
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'lda-service' # Der Name deines Cloud Run Services
      - '--image'
      - 'europe-west3-docker.pkg.dev/$PROJECT_ID/agent-images/lda-service:$BUILD_ID'
      - '--region'
      - 'europe-west3'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' # Erlaubt öffentliche Aufrufe, z.B. von Pub/Sub
      # Hier werden die Umgebungsvariablen für die deployte Anwendung gesetzt.
      # Die Werte werden direkt aus den Build-Substitution-Variablen oder als Klartext übergeben.
      - '--set-env-vars=GCP_PROJECT=${PROJECT_ID},AGENT_ID_SDA_BE=agent-sda-be,AGENT_ID_LDA=agent-lda,TOPIC_REPORTS=final_reports,TOPIC_SDA_BE_TASKS=sda_be_tasks,TOPIC_LDA_TASKS=lda_tasks,TOPIC_TASK_ASSIGNMENTS=task_assignments'
    id: 'Deploy to Cloud Run'

images:
  - 'europe-west3-docker.pkg.dev/$PROJECT_ID/agent-images/lda-service:$BUILD_ID'

options:
  #TODO: Cashing-Möglichkeiten prüfen
  logging: CLOUD_LOGGING_ONLY